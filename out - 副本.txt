我们开设了一门心理学统计课程，录制了整个课程的音频并将其转换成文字稿。但是，这份文字稿过于口语化，逻辑不够清晰。因此，我们需要简化它，使其更像出版物的文字稿。我们需要一个干净的数据格式，这在SPSS中是固定的。如果我们想要进行回归或中介分析等，就需要对数据进行预处理。在本节课中，我们将讲解如何对从问卷或实验软件中下载的数据进行预处理，以得到我们最终想要分析的数据。我们将演示如何将多个数据合并成一个完整的数据，使用for loop或lapply函数。在使用for loop之前，我们需要了解一些读取文件的知识，包括相对路径等。为什么要学习绝对路径呢？因为当计算机或R要与我们本地文件夹交互时，它必须进入读取本地文件夹。如果我们有一个本地文件夹，比如说一个文件夹，那么我们需要找到它的路径，然后将路径输入到命令中，作为一个字符串，输送到处理器中，才能够读取。这就是我们上一节课讲读取CSV文件时所做的事情。我们会给出一个完整的路径或相对路径，让R内部的计算机知道文件在哪里，并对其进行操作，比如read.csv。如果我们要读取一系列文件，我们需要将它们的相对路径读入，然后依次输入到处理器中，让它们被读取并合并成一个完整的数据框。因此，我们需要使用for循环或apply函数将所有文件的路径列出来，并将它们输入到处理器中，让它们被读取并合并。我们的输入是文件夹中的文件名。大家可以看一下自己电脑中的文件夹，会发现有很多子文件夹，比如practice、match和category，它们表示三个时间阶段。我们开设了一门关于心理学统计的课程，其中包括三个任务：ce、match和category。现在我们需要找出所有包含match且以out结尾的文件，因为这些是我们需要读取的文件。我们不想逐个列出每个文件名，因为这样太冗长、容易出错且不够简洁。我们可以使用R中的list函数，将文件夹中的所有文件列出来，然后筛选只包含match的文件名。为了实现这一点，我们需要使用通配符，它是一种特殊的符号，可以匹配任意字符。例如，*.csv代表以csv结尾的所有文件。我们可以使用list函数扫描文件夹，找到所有以match开头且以out结尾的文件名，然后将它们合并成我们需要的文件。我们需要找到以.csv结尾的文件。如果我们查看data/match文件夹，有多少个这样的文件呢？是0个，对吧？如果大家使用的是我们最初发给大家的数据，那么应该也是0个。让我再解释一遍这个逻辑，因为我看到有些同学还没有点头。就像跟叔叔说我们现在要假设这个正方形代表我们当前存储数据的文件夹，里面有一系列的文件。我们要读取这个文件夹里的一部分文件，输入到R中进行读取，使用CSS函数进行读取。我们要做的第一件事是扫描这个文件夹，不一定是ls，而是扫描这个文件夹，把里面所有的文件和文件夹都读取出来。但是这样并不完全符合我们的目标，因为我们只需要符合max这个条件，也就是以out结尾的数据。所以，我们需要列出max文件夹里所有的文件，但这并不符合我们的目标。这时，我们需要使用通配符来匹配文件夹里包含特殊信息的文件。也就是说，我们需要根据文件名是否包含match来筛选文件夹里的文件。这时，我们需要使用通配符，尤其是问号这个通配符。因为在计算机语言中，问号代表任意数量的任意字符。当我们以信号.csv结尾时，代表我们只需要扫描以.csv结尾的文件，把它们全部读出来，读取它们的完整文件名。如果它不是以.csv结尾的，我们就跳过它。问号代表单个字符，也就是信号代表任意单个字符。例如，如果我们使用file?，然后是.txt，那么它能够匹配的符合条件的文件就是file1、file2、file3等等。但是如果你是file10，它后面有两个字符，这时它就不匹配了。中括号里的字符是用或的关系，就是说，中括号里的123代表file1后面跟1、2或3都可以。这样可以任意灵活地匹配。因为有可能你不知道文件夹里有多少个文件，你就把它们全部写在中括号里，只要它包含在里面，我们就把它读取出来。那么我们该怎么使用它呢？首先，我们需要查看路径，每个人的路径都不一样。这是助教电脑上的路径，我的电脑上的路径可能不一样，我还没有把它render出来。我们需要先加载tidyverse这个包，这样就不用每次都提醒大家在开始处理之前要load这个包，否则在使用函数时会出错。这是一个准备工作，需要提醒大家。接着，我们找到了当前的工作路径。我们可以用两种方法来处理这个for循环，其中一种是使用一个变量名files来存储我们从这个文件夹里扫描到的所有文件的名字。在R中，list.files()是一个函数，它可以扫描文件夹里的所有文件。第一个参数是你要在哪个文件夹里扫描。这个时候我们的filepattern是一个相对路径，即在当前的工作目录里的data文件夹中，然后在这个文件夹中的match文件夹里进行扫描。我们使用这个pattern来筛选文件夹里的文件名，比如包含了这个match的，或者更加精确的，我们要以这个match，即data experiment 7，然后以repeat开头的文件。然后我们使用一个通配符来表示所有以out结尾的文件都扫描进来。这样扫描完后，我们就得到了所有符合我们这个模式的文件的名字。我们只会得到它们的文件名，不包含它们的路径。但是如果我们把它们读取出来并列出前面10个，我们就可以看到它们确实完全符合我们上面那个规则。list.files()函数非常有用，因为它可以帮助我们快速地扫描文件夹里的所有文件。这是修改后的文本：

这个操作实际上是扫描一个文件夹，并按照特定模式扫描文件。这在任何计算机中都非常重要，因为它涉及到软件如何与文件夹中的数据进行交互。在R语言中，我们经常使用这个操作来读取数据，这是第一步。初学者需要了解为什么要这么做。我们现在读取到的是一个向量，其中每个元素包含许多字符，每个字符代表一个文件名。这与我们之前讨论的读取单个文件不同。现在我们正在列出一个文件夹中所有符合特定模式或规则的文件名。读取完后，我们可以使用for循环。首先，我们需要创建一个空的列表来存储读取的数据。for循环的结构是for（条件）{内容}。我们使用i来循环，in表示我们要循环的范围。在for循环中，我们使用i来逐个循环。我们首先将i设置为1，然后做某些事情，然后在i等于2时再做同样的事情，一直到i等于10。在for循环中，我们使用df=read.table来读取文件。文件的路径是相对路径，是data match和files的组合。files是文件夹中的一个文件。在这门关于心理学统计的课程中，我们需要修改录音。首先，我们需要理清逻辑，去除无意义的语气词。当i等于1时，我们读取的是第一个文件。我们按照header为true的方式去读取，然后在for循环里进行转换，以避免后面出错。我们发现out文件里保存的可能不是那么统一，因此我们需要去掉重复的列名。我们可以用一个规则，即如果data再次出现，表示它重复了上面这个列名，我们就把所有这样的行去掉。我们用了上次课选择的那个筛选函数，反向筛选掉之后，我们还可以对它的变量类型做一些变化。我们基本上就是用了as correct和as numerical这两种，把所有的列都变成我们想要的类型。然后，我们生成了一个数据框，并进行了转换。当i等于1时，它就是对第一个文件做了这一番操作。然后，我们把它复制到数据列表里面，作为这个列表里面的第一个位置。我们这个列表里面就装数据框，第一个位置就是最后变成的第一个out文件，它经过了转换之后的数据框，就装到数据框列表里面的第一个位置。同理，我们循环读取id位，读第二个，然后一直倒计10个，读完。如果files里面有10个文件加名字的话，我们最后就...